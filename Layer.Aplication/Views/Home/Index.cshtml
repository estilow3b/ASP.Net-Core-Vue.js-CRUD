@{
    ViewData["Title"] = "Home Page";
}

<div id="appVue" class="container">
    <div class="col-12">
        <form class="form-inline">
            <div class="form-group">
                <label for="Producto">Producto:</label>
                <input type="text" class="form-control" id="Producto" v-model="Filtro">
            </div>
            <button type="button" class="btn btn-success my-2" @@click="postFiltroProductos">Buscar</button>
            <a href="/Home/Nuevo" class="btn btn-primary">Nuevo</a>

        </form>
    </div>

    <div class="col-12 mt-4">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Código</th>
                    <th scope="col">Producto</th>
                    <th scope="col">Cantidad</th>
                    <th scope="col">Precio</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="item in ListaProducto">
                    <template v-if="item.Editar==true">
                        <td scope="row">{{item.codiProducto}}</td>
                        <td scope="row"><input v-model="item.descripcionProducto" /></td>
                        <td scope="row"><input v-model="item.cantidadProducto" /></td>
                        <td scope="row"><input v-model="item.precioProducto" /></td>
                        <td>
                            <button type="button" class="btn btn-primary" @@click="putModificaProducto(item)">Actualizar</button>
                            <button type="button" class="btn btn-danger" @@click="cancelar">Cancelar</button>
                        </td>
                    </template>
                    <template v-else>
                        <td scope="row">{{item.codiProducto}}</td>
                        <td scope="row">{{item.descripcionProducto}}</td>
                        <td scope="row">{{item.cantidadProducto}}</td>
                        <td scope="row">{{item.precioProducto}}</td>
                        <td>
                            <button type="button" class="btn btn-success" @@click="editar(item.codiProducto)">Editar</button>
                            <button type="button" class="btn btn-danger" @@click="deleteEliminaProducto(item.codiProducto)">Eliminar</button>
                        </td>
                    </template>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script>
    var appVue = new Vue({
        el: "#appVue",
        name: "appVue",
        data: {
            Filtro: '',
            ListaProducto: [],
        },
        mounted: function () {
            //Se crea esta variable "_this" para acceder a las variables 
            //del tag "data" y métodos del tag "methods"
            let _this = this;

            //Se llama al metodo de listado de producto
            _this.getListaProductos();
        },
        methods: {
            getListaProductos: function () {

                //Se crea esta variable "_this" para acceder a las variables 
                //del tag "data" y métodos del tag "methods"
                let _this = this;

                //Se emplea la libreria AXIOS con metodo Http GET para consumir 
                //un servicio igual de tipo GET. Se ingresa como parametro la URL.
                //La URL es la concatenacion de window.location.origin que obtiene la 
                //URL principal(http://localhost:[Numero Puerto) y con el nombre 
                //de la accion tipo GET (Listar) que realiza el listado de productos
                axios.get(window.location.origin + "/Listar").then(response => {

                    //La variable ListaProducto recibe los resultado de la accion GET
                    //con el objeto response.data
                    _this.ListaProducto = response.data;


                    //Ahora se declara un array sin elementos para pasar 
                    //los elementos de la variable "ListaProducto" con una 
                    //propiedad adicional "Editar" de tipo Booleno(True / False)
                    //La propiedad "Editar" se empleara para validar en HTML 
                    //si un registro pasa a estado de edición para su luego 
                    //actualización de datos o solo lectura
                    var ListaDetalle = [];

                    //Se recorre los elementos del array "ListaProducto"
                    for (var x = 0; x <= _this.ListaProducto.length - 1; x++) {
                        //En cada recorrido se crea un objeto "item" vacio
                        var item = {};

                        //Se agrega el contenido del elemento del array 
                        //"ListaProducto" en el objeto "item"
                        item = _this.ListaProducto[x];

                        //Se agrega la propiedad "Editar" con el valor 
                        //predeterminado "False" en el objeto item
                        item.Editar = false;

                        //Se agrega el objeto "item" en el array "ListaDetalle"
                        ListaDetalle.push(item);
                    }

                    //Cuando termina el recorrido se reemplaza los elementos
                    //de la variable "ListaProducto" por el nuevo array "ListaDetalle"
                    _this.ListaProducto = ListaDetalle;
                });

            },

            postFiltroProductos: async function () {

                //Se crea esta variable "_this" para acceder a las variables 
                //del tag "data" y métodos del tag "methods"
                let _this = this;

                //Se crea el objeto con los parametros de filtro de productos
                var request = {};

                //Se asigna a la propiedad DescripcionProducto del objeto request 
                //El valor de filtro de la propiedad DescripcionProducto debe ser 
                //igual en objeto "JavaScript" y ".Net Core"
                request.DescripcionProducto = _this.Filtro;

                //Se emplea la libreria "AXIOS" con metodo Http "POST" para consumir 
                //un servicio igual de tipo POST. Se ingresa como parametro la URL 
                //y el objeto con valores request. La URL es la concatenacion de 
                //window.location.origin obtiene la URL principal(http://localhost:[Numero Puerto)
                //y se concatena con el nombre de la accion tipo POST (Filtrar) que realiza 
                //el filtrado de productos con el objeto request
                axios.post(window.location.origin + "/Filtrar", request).then(response => {

                    //La variable ListaProducto recibe los resultado de la accion GET
                    //con el objeto response.data
                    _this.ListaProducto = response.data;

                    //Ahora se declara un array sin elementos para pasar 
                    //los elementos de la variable "ListaProducto" con una 
                    //propiedad adicional "Editar" de tipo Booleno(True / False)
                    //La propiedad "Editar" se empleara para validar en HTML 
                    //si un registro pasa a estado de edición para su luego 
                    //actualización de datos o lectura
                    var ListaDetalle = [];

                    //Se recorre los elementos del array "ListaProducto"
                    for (var x = 0; x <= _this.ListaProducto.length - 1; x++) {

                        //En cada recorrido se crea un objeto vacio
                        var item = {};

                        //Se agrega el contenido del elemento del array 
                        //"ListaProducto" en el objeto "item"
                        item = _this.ListaProducto[x];

                        //Se agrega la propiedad "Editar" con el valor 
                        //predeterminado "False" en el objeto item
                        item.Editar = false;

                        //Se agrega el objeto "item" en el array "ListaDetalle"
                        ListaDetalle.push(item);
                    }

                    //Cuando termina el recorrido se reemplaza los elementos
                    //de la variable ListaProducto por el nuevo array ListaDetalle
                    _this.ListaProducto = ListaDetalle;
                });
            },

            putModificaProducto: function (item) {

                //Recibe de parametro el objeto "item" con los valores
                //de un producto

                //Se crea esta variable "_this" para acceder a las variables 
                //del tag "data" y métodos del tag "methods"
                let _this = this;

                //Se crea el objeto con los parametros de modificacion de producto
                var request = {};

                //Se asigna a las propiedades "CodiProducto", "DescripcionProducto", 
                //"CantidadProducto", "PrecioProducto" y "Activo" del objeto request
                //deben ser igual en objeto "JavaScript" y ".Net Core"
                //Los valores asignados al objeto request provienen del objeto parametro "item"
                request.CodiProducto = parseInt(item.codiProducto);
                request.DescripcionProducto = item.descripcionProducto;
                request.CantidadProducto = parseInt(item.cantidadProducto);
                request.PrecioProducto = parseFloat(item.precioProducto);
                request.Activo = item.activo;

                //Se emplea la libreria "AXIOS" con metodo Http "PUT" para consumir 
                //un servicio igual de tipo "PUT". Se ingresa como parametro la URL 
                //y el objeto con valores request. La URL es la concatenacion de 
                //window.location.origin obtiene la URL principal(http://localhost:[Numero Puerto)
                //y se concatena con el nombre de la accion tipo PUT (Actualizar) que realiza 
                //la modificación de un producto con el objeto request
                axios.put(window.location.origin + "/Actualizar", request).then(response => {

                    //Muestra un mensaje de modificación satisfactoria
                    alert(response.data);

                    //Llama al metodo de filtrado de productos creado anteriormente
                    _this.postFiltroProductos();

                    //Llama al metodo que cambia el registro de producto de estado
                    //de edición a solo lectura
                    _this.cancelar()
                });
            },

            deleteEliminaProducto: function (Codi_Producto) {
                //Se recibe de parametro el codigo de producto
                //con la variable "Codi_Producto"

                //Se crea esta variable "_this" para acceder a las variables 
                //del tag "data" y métodos del tag "methods"
                let _this = this;

                //Se emplea la libreria "AXIOS" con metodo Http "DELETE" para consumir 
                //un servicio igual de tipo DELETE. Se ingresa como parametro la URL. 
                //La URL es la concatenacion de window.location.origin obtiene 
                //la URL principal(http://localhost:[Numero Puerto), se concatena con el 
                //nombre de la accion tipo DELETE que realiza y el código de producto 
                //(Codi_Producto) para la eliminación de un producto.
                axios.delete(window.location.origin + "/Eliminar/" + Codi_Producto).then(response => {

                    //Muestra un mensaje de eliminación satisfactoria
                    alert(response.data);

                    //Llama al metodo de listado de productos creado anteriormente
                    _this.getListaProductos();
                });
            },

            editar: function (Codi_Producto) {
                //Se recibe de parametro el código de producto
                //con la variable "Codi_Producto"

                //Se crea esta variable "_this" para acceder a las variables 
                //del tag "data" y métodos del tag "methods"
                let _this = this;

                //Ahora se declara un array sin elementos para pasar 
                //los elementos de la variable "ListaProducto" con una 
                //propiedad adicional "Editar" de tipo Booleno(True / False)
                //La propiedad "Editar" se empleara para validar en HTML 
                //si un registro pasa a estado de edición para su luego 
                //actualización de datos o solo lectura
                var ListaDetalle = [];

                //Se recorre los elementos del array "ListaProducto"
                for (var x = 0; x <= _this.ListaProducto.length - 1; x++) {

                    //En cada recorrido se crea un objeto vacio
                    var item = {};


                    //Se agrega el contenido del elemento del array 
                    //"ListaProducto" en el objeto "item"
                    item = _this.ListaProducto[x];

                    //Se compara según el código de producto (Codi_Producto)
                    //recibido de parametro con el codigo de producto de elemanto 
                    //del array "ListaProducto" y cambiar la vista HTML a estado 
                    //de edición de datos para su actualizacion, modificando su 
                    //respectiva propiedad "Editar" a "True"
                    if (Codi_Producto == _this.ListaProducto[x].codiProducto) {
                        item.Editar = true;
                    } else {
                        item.Editar = false;
                    }

                    //Se agrega el objeto "item" en el array "ListaDetalle"
                    ListaDetalle.push(item);
                }

                //Cuando termina el recorrido se reemplaza los elementos
                //de la variable ListaProducto por el nuevo array ListaDetalle
                _this.ListaProducto = ListaDetalle;
            },

            cancelar: function () {
                //Se crea esta variable "_this" para acceder a las variables 
                //del tag "data" y métodos del tag "methods"
                let _this = this;

                //Ahora se declara un array sin elementos para pasar 
                //los elementos de la variable "ListaProducto" con una 
                //propiedad adicional "Editar" de tipo Booleno(True / False)
                //La propiedad "Editar" se empleara para validar en HTML 
                //si un registro pasa a estado de edición para su luego 
                //actualización de datos o lectura
                var ListaDetalle = [];

                //Se recorre los elementos del array "ListaProducto"
                for (var x = 0; x <= _this.ListaProducto.length - 1; x++) {

                    //En cada recorrido se crea un objeto vacio
                    var item = {};

                    //Se agrega el contenido del elemento del array 
                    //"ListaProducto" en el objeto "item"
                    item = _this.ListaProducto[x];

                    //Cada propiedad "Editar" del elemento del array
                    //recibe el valor "False"; para que su registro 
                    //producto vuelva a estado de solo lectura
                    item.Editar = false;

                    //Se agrega el objeto "item" en el array "ListaDetalle"
                    ListaDetalle.push(item);
                }

                //Cuando termina el recorrido se reemplaza los elementos
                //de la variable ListaProducto por el nuevo array ListaDetalle
                _this.ListaProducto = ListaDetalle;
            }
        }
    });
</script>
